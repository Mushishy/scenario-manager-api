openapi: 3.0.3
info:
  title: Ludus Extension API
  version: "1.0"
  description: API for managing scenarios, data, and topology in Ludus CTFd extension.

servers:
  - url: http://127.0.0.1:5000

components:
  securitySchemes:
    ApiKeyAuth: 
      type: apiKey 
      in: header
      name: X-API-Key
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Error message"
      required:
        - error

security:
  - ApiKeyAuth: []

paths:
  # Ctfd Scenario
  /ctfd/scenario:
    get:
      summary: Get scenario(s)
      description: Get a scenario by ID (as base64) or list all scenarios.
      tags:
        - CTFd Scenario
      parameters:
        - in: query
          name: scenarioId
          schema:
            type: string
          required: false
          description: Scenario ID
          example: "GHI123"
      responses:
        '200':
          description: Scenario(s) found
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      scenarioId:
                        type: string
                        pattern: "^[a-zA-Z0-9]{6}$"
                      scenarioName:
                        type: string
                      scenarioFile:
                        type: string
                        description: base64-encoded file
                      createdAt:
                        type: string
                        description: File creation timestamp
                  - type: array
                    items:
                      type: object
                      properties:
                        scenarioId:
                          type: string
                          pattern: "^[a-zA-Z0-9]{6}$"
                        scenarioName:
                          type: string
                        createdAt:
                          type: string
                          description: File creation timestamp
        '400':
          description: Bad Request
        '404':
          description: Not Found

    put:
      summary: Create or update a scenario
      description: Upload a .zip file to create or update a scenario.
      tags:
        - CTFd Scenario
      parameters:
        - in: query
          name: scenarioId
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          required: false
          description: Scenario ID (if updating)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Uploaded successfully
        '400':
          description: Bad Request
        '404':
          description: Not Found

    delete:
      summary: Delete a scenario
      tags:
        - CTFd Scenario
      parameters:
        - in: query
          name: scenarioId
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          required: true
          description: Scenario ID
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad Request
        '404':
          description: Not Found

  # Topology
  /topology:
    get:
      summary: Get topology
      tags:
        - Topology
      parameters:
        - in: query
          name: topologyId
          schema:
            type: string
          required: false
          description: Topology ID
          example: "XYZ789"
      responses:
        '200':
          description: Topology found
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      topologyId:
                        type: string
                        pattern: "^[a-zA-Z0-9]{6}$"
                      topologyName:
                        type: string
                      topologyFile:
                        type: string
                        description: base64-encoded file
                      createdAt:
                        type: string
                        description: File creation timestamp
                  - type: array
                    items:
                      type: object
                      properties:
                        topologyId:
                          type: string
                          pattern: "^[a-zA-Z0-9]{6}$"
                        topologyName:
                          type: string
                        createdAt:
                          type: string
                          description: File creation timestamp
        '400':
          description: Bad Request
        '404':
          description: Not Found

    put:
      summary: Create or update topology
      tags:
        - Topology
      parameters:
        - in: query
          name: topologyId
          schema:
            type: string
          required: false
          description: Topology ID (if updating)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Uploaded successfully
        '400':
          description: Bad Request
        '404':
          description: Not Found

    delete:
      summary: Delete topology
      tags:
        - Topology
      parameters:
        - in: query
          name: topologyId
          schema:
            type: string
          required: true
          description: Topology ID
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad Request
        '404':
          description: Not Found
  
  # Pool
  /pool:
    post:
      summary: Create a new pool
      description: Create a new pool with topology, users, and optional CTFd data
      tags:
        - Pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: ["CTFD", "SHARED", "INDIVIDUAL"]  # Fixed: was ["SHARED", "INDIVIDUAL", "TEAM"]
                  example: "SHARED"
                topologyId:
                  type: string
                  example: "KFfeQZ"  # Removed pattern - your code doesn't validate this
                mainUser:
                  type: string
                  example: "instructor1"
                  description: "Required for SHARED or INDIVIDUAL types"
                usersAndTeams:
                  type: array
                  items:
                    type: object
                    properties:
                      user:
                        type: string
                        example: "Alice Dan Mayers"
                      team:
                        type: string
                        example: "Red Team"
                    required:
                      - user
                    additionalProperties: false
                note:
                  type: string
                  maxLength: 15
                  example: "Training"
              required:
                - type
                - topologyId
                - note  # Added: this is required in your schema
              additionalProperties: false
      responses:
        '200':
          description: Pool created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Uploaded successfully"
                  id:
                    type: string
                    example: "ABC123"  # Fixed: uses generated ID format
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Topology or CTFd data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get pools
      description: Get a specific pool or list all pools
      tags:
        - Pool
      parameters:
        - name: poolId
          in: query
          schema:
            type: string
          description: ID of the pool to retrieve
          example: "ABC123"
        - name: userIds
          in: query
          schema:
            type: boolean
          description: If set to "true", returns only userIds for the specified pool
          example: "true"
      responses:
        '200':
          description: Pool data or list of pools
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Single pool (full data)
                    properties:
                      poolId:
                        type: string
                        example: "ABC123"
                      createdBy:
                        type: string
                        example: "admin"
                      createdAt:
                        type: string
                        format: date-time
                        description: When the pool was created
                        example: "2025-08-30T14:30:45Z"
                      type:
                        type: string
                        enum: ["CTFD", "SHARED", "INDIVIDUAL"]
                        example: "SHARED"
                      topologyId:
                        type: string
                        example: "XYZ789"
                      mainUser:
                        type: string
                        example: "instructor1"
                      usersAndTeams:
                        type: array
                        items:
                          type: object
                          properties:
                            user:
                              type: string
                              example: "Alice Dan Mayers"
                            userId:
                              type: string
                              example: "BATCHalicedanmayers"
                            team:
                              type: string
                              example: "Red Team"
                      note:
                        type: string
                        maxLength: 15
                        example: "Training session"
                      ctfdData:
                        type: boolean
                        description: Indicates if CTFD data is available for this pool
                        example: true
                  - type: object
                    description: Single pool (userIds only)
                    properties:
                      poolId:
                        type: string
                        example: "ABC123"
                      userIds:
                        type: array
                        items:
                          type: string
                        example: ["BATCHalicedanmayers", "BATCHbobsmith"]
                  - type: array
                    description: List of all pools
                    items:
                      type: object
                      properties:
                        poolId:
                          type: string
                          example: "ABC123"
                        createdBy:
                          type: string
                          example: "admin"
                        createdAt:
                          type: string
                          format: date-time
                          description: When the pool was created
                          example: "2025-08-30T14:30:45Z"
                        type:
                          type: string
                          enum: ["CTFD", "SHARED", "INDIVIDUAL"]
                          example: "SHARED"
                        topologyId:
                          type: string
                          example: "XYZ789"
                        note:
                          type: string
                          maxLength: 15
                          example: "Training session"
                        ctfdData:
                          type: boolean
                          description: Indicates if CTFD data is available for this pool
                          example: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a pool
      description: Delete a specific pool and all its data
      tags:
        - Pool
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
          description: ID of the pool to delete
          example: "ABC123"
      responses:
        '204':
          description: Pool deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pool/topology:
    patch:
      summary: Update pool topology
      description: Update the topology ID for a specific pool.
      tags:
        - Pool
      parameters:
        - in: query
          name: poolId
          schema:
            type: string
          required: true
          description: Pool ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topologyId:
                  type: string
                  pattern: "^[a-zA-Z0-9]{6}$"
              required:
                - topologyId
      responses:
        '200':
          description: Pool topology updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Updated successfully"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not Found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
                    
  /pool/note:
    patch:
      summary: Update pool note
      description: Update the note for a specific pool.
      tags:
        - Pool
      parameters:
        - in: query
          name: poolId
          schema:
            type: string
          required: true
          description: Pool ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
                  maxLength: 15
              required:
                - note
      responses:
        '200':
          description: Pool note updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Updated successfully"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not Found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /pool/users:
    post:
      summary: Check if user IDs exist in pools
      description: Check if specific user IDs already exist in any pool across the system
      tags:
        - Pool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  example: ["BATCHuser1", "BATCHuser2", "BATCHalicedanmayers"]
              required:
                - userIds
              additionalProperties: false
      responses:
        '200':
          description: User ID check results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                      example: "BATCHuser1"
                    exists:
                      type: boolean
                      description: Whether this user ID exists in any pool
                      example: true
        '400':
          description: Bad Request - Invalid request body or validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Add users to pool
      description: Add new users to an existing pool, combining them with existing users
      tags:
        - Pool
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to add users to
          example: "ABC123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - usersAndTeams
              properties:
                usersAndTeams:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - user
                    properties:
                      user:
                        type: string
                        description: Full name of the user
                        example: "Alice Dan Mayers"
                      team:
                        type: string
                        description: Team name (optional, but if one user has a team, all must have teams)
                        example: "Red Team"
      responses:
        '200':
          description: Users added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Users added successfully"
        '400':
          description: Bad Request - Invalid request body, no users provided, or team consistency violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Ctfd Data
  /ctfd/data:
    get:
      summary: Get flag data
      tags:
        - Ctfd Flag Data
      parameters:
        - in: query
          name: poolId
          schema:
            type: string
          required: true
          description: Pool ID to get CTFD data for
          example: "DEF456"
      responses:
        '200':
          description: CTFD data found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ctfdData:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: string
                          example: "alice"
                        password:
                          type: string
                          example: "password123"
                        team:
                          type: string
                          example: "Red Team"
                        flags:
                          type: array
                          items:
                            type: object
                            properties:
                              variable:
                                type: string
                                example: "FLAG_1"
                              contents:
                                type: string
                                example: "example_flag_content"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool not found or CTFD data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Ctfd Flag Data
      summary: Extract and retrieve CTFd flags from user logs
      description: Extracts flags from deployed range logs for all users in a pool and saves the data to ctfd_data.json
      security:
        - ApiKeyAuth: []
      parameters:
        - name: poolId
          in: query
          required: true
          description: The pool ID to extract flags for
          schema:
            type: string
      responses:
        '200':
          description: Flags extracted and saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Flags extracted and saved successfully"
                  poolId:
                    type: string
                    example: "pool123"
                  ctfd_data:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: string
                          example: "user1"
                        password:
                          type: string
                          example: "password123"
                        team:
                          type: string
                          example: "team1"
                        flags:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              value:
                                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
        '401':
          description: Unauthorized - Invalid or missing API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Not Found - Pool not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not Found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /ctfd/data/logins:
    get:
      summary: Get CTFd logins
      description: Retrieve user login information in CSV format for a specific CTFd data ID or all available data.
      tags:
        - Ctfd Flag Data
      parameters:
        - in: query
          name: poolId
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          required: false
          description: Data ID to retrieve logins for. If not provided, retrieves logins for all data.
      responses:
        '200':
          description: Logins retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                example: |
                  user1, password1, team1
                  user2, password2, team2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not Found"

  # Ludus User Management
  /users/import:
    post:
      summary: Import users from pool
      description: Import all users from a pool into Ludus
      tags:
        - Ludus User Management
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: Import results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                        error:
                          type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/delete:
    post:
      summary: Delete users
      description: Delete users either by pool ID or by providing specific user IDs in request body
      tags:
        - Ludus User Management
      parameters:
        - name: poolId
          in: query
          required: false
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from (optional - if not provided, userIds must be in request body)
          example: "ABC123"
      requestBody:
        description: User IDs to delete (required if poolId not provided)
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                  example: ["BATCHuser1", "BATCHuser2"]
      responses:
        '200':
          description: Delete results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                          description: Ludus API response for successful deletion
                        error:
                          type: string
                          description: Error message if deletion failed
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/check:
    get:
      summary: Check users from pool
      description: Check which users from a pool exist in Ludus
      tags:
        - Ludus User Management
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: Check results
          content:
            application/json:
              schema:
                type: object
                properties:
                  missingUserIds:
                    type: array
                    items:
                      type: string
                    description: Array of user IDs that don't exist in Ludus
                    example: ["BATCHuser2", "BATCHuser4"]
                  allExist:
                    type: boolean
                    description: Whether all users from the pool exist in Ludus
                    example: false
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Ludus Range Config
  /range/config:
    post:
      summary: Set range configuration for pool users
      description: Upload topology configuration to all users in a pool based on the pool's assigned topology
      tags:
        - Ludus Range Config
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users and topology from
          example: "ABC123"
      responses:
        '200':
          description: Configuration upload results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                          description: Ludus API response for successful upload
                        error:
                          type: string
                          description: Error message if upload failed
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool or Topology Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Check if user configurations match pool topology
      description: Check if all users in a pool have range configurations that match the pool's assigned topology
      tags:
        - Ludus Range Config
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to check users from
          example: "ABC123"
      responses:
        '200':
          description: Configuration match result
          content:
            application/json:
              schema:
                type: object
                properties:
                  matchPoolTopology:
                    type: boolean
                    description: Whether all user configurations match the pool's topology
                    example: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool or Topology Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  # Ldus Range Sharing
  /range/access:
    get:
      summary: Get WireGuard access configs for pool users
      description: Download WireGuard configuration files for all users in a pool as a ZIP file
      tags:
        - Ludus Range Sharing
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: ZIP file containing WireGuard configurations
          content:
            application/zip:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename=wireguard-configs.zip'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool or configs not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /range/share:
    post:
      summary: Share range access for pool users
      description: Grant range access from all users in a pool to a target user
      tags:
        - Ludus Range Sharing
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
        - name: targetId
          in: query
          required: true
          schema:
            type: string
          description: Target user ID to grant access to
          example: "instructor1"
      responses:
        '200':
          description: Share results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                        error:
                          type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /range/unshare:
    post:
      summary: Unshare range access for pool users
      description: Revoke range access from all users in a pool to a target user
      tags:
        - Ludus Range Sharing
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
        - name: targetId
          in: query
          required: true
          schema:
            type: string
          description: Target user ID to revoke access from
          example: "instructor1"
      responses:
        '200':
          description: Unshare results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                        error:
                          type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /range/shared:
    get:
      summary: Check range sharing status for target user
      description: |
        Check the range sharing status between pool users and a target user.
        
        The function:
        1. Gets all users from the specified pool
        2. Queries the Ludus API for current range access permissions
        3. Determines if the targetId exists in any sharing relationships
        4. If found, checks if all pool users are sharing with the target
        5. Returns both shared and unshared status
        
        Response combinations:
        - `{"shared": false, "unshared": true}` - Target has no shared ranges at all
        - `{"shared": false, "unshared": false}` - Target has some shared ranges, but not from all pool users
        - `{"shared": true, "unshared": false}` - Target has shared ranges from all pool users
      tags:
        - Ludus Range Sharing
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
        - name: targetId
          in: query
          required: true
          schema:
            type: string
          description: Target user ID to check shared access for
          example: "instructor1"
      responses:
        '200':
          description: Range sharing status result
          content:
            application/json:
              schema:
                type: object
                properties:
                  shared:
                    type: boolean
                    description: True if ALL pool users have shared their ranges with the target user
                    example: true
                  unshared:
                    type: boolean
                    description: True if the target user has NO shared ranges at all (does not appear in any sharing relationships)
                    example: false
                required:
                  - shared
                  - unshared
              examples:
                no_sharing:
                  summary: Target has no shared ranges
                  value:
                    shared: false
                    unshared: true
                partial_sharing:
                  summary: Target has some shared ranges, but not from all pool users
                  value:
                    shared: false
                    unshared: false
                complete_sharing:
                  summary: Target has shared ranges from all pool users
                  value:
                    shared: true
                    unshared: false
        '400':
          description: Bad Request - Invalid pool ID or missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error - Failed to communicate with Ludus API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Ludus Range Deployment
  /range/deploy:
    post:
      summary: Deploy range for pool users
      description: Deploy range infrastructure for all users in a pool
      tags:
        - Ludus Range Deployment
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: Deployment results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                        error:
                          type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /range/status:
    get:
      summary: Check range status for pool users
      description: Get current range status for all users in a pool
      tags:
        - Ludus Range Deployment
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: Status check results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        state:
                          type: string
                          enum: ["DEPLOYED", "DEPLOYING", "DESTROYED", "DESTROYING", "ERROR", "ABORTED", "unknown"]
                          example: "DEPLOYED"
                        error:
                          type: string
                          description: Error message if status check failed
                  allDeployed:
                    type: boolean
                    description: Whether all users have status "DEPLOYED"
                    example: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /range/redeploy:
    post:
      summary: Redeploy range for pool users
      description: Redeploy range infrastructure for all users in a pool based on current state
      tags:
        - Ludus Range Deployment
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: Redeployment results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        action:
                          type: string
                          example: "redeployed"
                        message:
                          type: string
                        state:
                          type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /range/abort:
    post:
      summary: Abort range deployment for pool users
      description: Abort ongoing range deployment for all users in a pool
      tags:
        - Ludus Range Deployment
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: Abort results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                        error:
                          type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /range/remove:
    post:
      summary: Remove range for pool users
      description: Remove range infrastructure for all users in a pool
      tags:
        - Ludus Range Deployment
      parameters:
        - name: poolId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-zA-Z0-9]{6}$"
          description: Pool ID to get users from
          example: "ABC123"
      responses:
        '200':
          description: Removal results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "BATCHuser1"
                        response:
                          type: object
                        error:
                          type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pool Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'